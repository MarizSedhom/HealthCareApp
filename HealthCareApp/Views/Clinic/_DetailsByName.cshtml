@using HealthCareApp.ViewModel.Clinic

@model IEnumerable<ClinicInfoVM>
<table class="table mt-1">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClinicAddress)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.ClinicCity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClinicRegion)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClinicPhoneNumber)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ClinicAddress)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ClinicCity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ClinicRegion)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ClinicPhoneNumber)
                </td>
                <td class="text-end action-buttons">
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-md" >Edit</a>
                    <a asp-action="DetailsByID" asp-route-id="@item.Id" class="btn btn-info btn-md ms-2" >Details</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-md ms-2">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>



@* @{
    int currentPage = ViewBag.CurrentPage;
    int totalPages = ViewBag.TotalPages;
    int pagesPerGroup = 5;

    int currentGroup = (int)Math.Ceiling((double)currentPage / pagesPerGroup);
    int startPage = (currentGroup - 1) * pagesPerGroup + 1;
    int endPage = Math.Min(startPage + pagesPerGroup - 1, totalPages);
}

<nav class="mt-3">
    <ul class="pagination justify-content-center">

        <!-- First Page -->
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(1)">«</a>
        </li>

        <!-- Previous 5 -->
        <li class="page-item @(startPage <= 1 ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@(Math.Max(1, startPage - pagesPerGroup)))">‹‹</a>
        </li>

        <!-- Previous -->
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@(currentPage - 1))">‹</a>
        </li>

        @for (int i = startPage; i <= endPage; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@i)">@i</a>
            </li>
        }

        <!-- Next -->
        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@(currentPage + 1))">›</a>
        </li>

        <!-- Next 5 -->
        <li class="page-item @(endPage >= totalPages ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@(startPage + pagesPerGroup))">››</a>
        </li>

        <!-- Last Page -->
        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0);" onclick="loadSearchPage(@totalPages)">»</a>
        </li>
    </ul>
</nav> *@